#!/usr/bin/env php
<?php
namespace Demo;
use Gaia\Nonce;
use Gaia\Test\Tap;
include __DIR__ . '/common.php';

/**
* This class is a not-too-useful demonstration of how you might use a nonce to verify the input
* came from a form generated by you.
*
* The nonce is only as good as the token you use. If all i want to do is make sure that the form
* submitted came from the same user that generated the form, i can make a token out of the user id.
* other options include checksumming all of the known input values of the form and creating the token
* from that. The token must stay consistent between the input and the validation requests for the 
* nonce to work. 
* 
* We also specify how long the nonce is good for. If we want the form to only be valid for two minutes,
* we can set the NONCE_TIMEOUT class constant here to 120 seconds. This example only allows 10 seconds.
* Completely artificial example, but it works for us.
*
*/
class MyPage {

    protected static $session_id;
    const NONCE_TIMEOUT = 10;
    
    function render(){
        if( ! isset( $_REQUEST['mynonce'] ) ) return self::renderForm('submit nonce, please');
        if( ! self::checkNonce( $_REQUEST['mynonce'] ) ) return self::renderForm('invalid nonce .. try again');
        return self::renderSuccess($_REQUEST['mynonce']);
    }
    
    public function renderForm($message){
        return 
            '<h1>' . $message  . '<h1>' . "\n" .
            '<form>' . "\n" .
            '<input type="hidden" name="mynonce" value="' . self::createNonce() . '"/>' . "\n" .
            '<input type="submit"/>' . "\n" .
            '</form>';
    }
    
    public function renderSuccess($nonce){
        return '<h1>successful nonce: ' . $nonce . '</h1>';
    }
    
    public static function createNonce(){
        return Nonce::create(self::token(), time() + self::NONCE_TIMEOUT);
    }
    
    public function checkNonce( $nonce ){
        return Nonce::check( $nonce, self::token() );
    }
    
    protected static function token(){
        return __CLASS__ . '/' . self::session_id();
    }
    
    // normally would just do: session_id() ... but this is a test, so let's control it a bit.
    // you could do anything unique to the user, like a facebook user id, or some other unique
    // value to the user.
    protected static function session_id(){
        if( isset( self::$session_id ) ) return self::$session_id;
        return self::$session_id = md5('test' . time());
    }
}

// ----
// 
// fake a nonce secret here, since we don't want to depend on the ./.nonce.secret.php file in the demo.
Nonce::setSecret('demo/mypage/' . microtime(TRUE));
Tap::plan(2);
$input_form = MyPage::render();
Tap::like($input_form, '/form/i', 'input form rendered' );
Tap::debug( $input_form, 'input form' );

// fake the nonce value
$_REQUEST['mynonce'] = MyPage::createNonce();
$success_page = MyPage::render();
Tap::like($success_page, '/success/i', 'success page prints after nonce validates');
Tap::debug( $success_page, 'validation page' );

